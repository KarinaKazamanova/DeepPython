# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞. 
# ‚óã–ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤. 
# ‚óã–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞ CSV –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã. 
# ‚óã–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 2 –¥–æ 5) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (–æ—Ç 0 –¥–æ 100). 
# ‚óã–¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.
import csv


class Fullname:
    def __init__(self):
        self

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)
    
    def __set__(self, instance, value):
        
            self.validate(value)
            setattr(instance, self.param_name, value)

    
        

    def __delete__(self, instance):
        raise AttributeError(f"–°–≤–æ–π—Å—Ç–≤–æ '{self.param_name}' –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
    
    def validate(self, value):
        if value.isalpha():
            if not value == value.lower().capitalize():
                raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Å—Ç—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º–∏")

        else:
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–¥–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
 
class Mark:
    
    def __init__(self,minimum_mark,maximum_mark ):
        self.minimum_mark = minimum_mark
        self.maximum_mark = maximum_mark

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)
    
    def __set__(self, instance, value):
        
            self.validate(value)
            setattr(instance, self.param_name, value)

    
        

    def __delete__(self, instance):
        raise AttributeError(f"–°–≤–æ–π—Å—Ç–≤–æ '{self.param_name}' –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
    
    def validate(self, value):
        if not isinstance(value, int):
            
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Å—Ç—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º–∏")
        if value < 2:
            self.value = 2 # –ò–ª–∏ –ª—É—á—à–µ None –≤–µ—Ä–Ω—É—Ç—å
        if value >  5:
            self.value = 5 # –ò–ª–∏ –ª—É—á—à–µ None –≤–µ—Ä–Ω—É—Ç—å

class Score:
    def __init__(self,minimum_mark,maximum_mark ):
        self.minimum_mark = minimum_mark
        self.maximum_mark = maximum_mark

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)
    
    def __set__(self, instance, value):
        
            self.validate(value)
            setattr(instance, self.param_name, value)

    
        

    def __delete__(self, instance):
        raise AttributeError(f"–°–≤–æ–π—Å—Ç–≤–æ '{self.param_name}' –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
    
    def validate(self, value):
        if not isinstance(value, int):
            
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Å—Ç—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º–∏")
        if value < 0:
            self.value = 0 # –ò–ª–∏ –ª—É—á—à–µ None –≤–µ—Ä–Ω—É—Ç—å
        if value >  100:
            self.value = 100 # –ò–ª–∏ –ª—É—á—à–µ None –≤–µ—Ä–Ω—É—Ç—å

    

class Student:
    first_name = Fullname()
    second_name = Fullname()
    last_name = Fullname()
    _mark = Mark(2,5)
    _score = Score(0,100)
    _subjects = []
    _subject_score= {}
    _subject_mark = [] # –î–ª—è —Ü–µ–ª–µ–π –∑–∞–¥–∞—á–∏, –ø–æ—Ö–æ–∂–µ, –Ω–µ –≤–∞–∂–Ω–æ —Å–æ–æ—Ç–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º
   


    def __init__(self):
        self
        # self.first_name = first_name
        # self.second_name = second_name
        # self.last_name = last_name
        

        # self._subject_score = {}
        # self._subject_mark = []
    
    @property
    def mark(self):
        return self._mark
    
    @property
    def score(self):
        return self._score
    
    @mark.setter
    def mark(self, value):
        if 2 <= value < 6:
            self._subject_mark.append(value)
        else:
            raise ValueError(f"–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–∏–∞–ø–æ–∑–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π  —à–∫–æ–ª–æ–π —à–∫–∞–ª—ã –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è") 
        
    @score.setter
    def score(self, subject, score):
        if 0 <= score < 101:
            self._subject_score[subject] = score
        else:
            raise ValueError("–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100 –±–∞–ª–ª–æ–≤")
    
    def __str__(self):
        return f"{self.first_name} {self.second_name} {self.last_name}"
    
    def __enter__(self):
        new_file = open("students_data.csv", "r", encoding="utf-8", newline="")
        csv_file = csv.reader(new_file)
        new_dict = {}
        for line in csv_file:
            key = f"{line[0]} {line[1]} {line[2]}"
            new_dict[key].append(line[3])
        return new_dict
    
    def __exit__(self,new_file, exc_type, exc_val, exc_tb):
        
        new_file.close()



stt_one  = Student()

with stt_one as st:
    print(st)




